{"ast":null,"code":"var _jsxFileName = \"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ExclamationError.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ExclamationError extends React.Component {\n  constructor() {\n    super();\n    this.ref = /*#__PURE__*/React.createRef();\n    this.state = {};\n  }\n\n  componentDidUpdate() {\n    const {\n      shouldDisplay\n    } = this.props;\n\n    if (this.ref.current && shouldDisplay) {\n      this.ref.current.classList.add(`${styles.visible}`);\n    } else if (this.ref.current && !shouldDisplay) {\n      this.ref.current.classList.remove(`${styles.visible}`);\n    }\n  }\n\n  render() {\n    const {\n      labelType\n    } = this.props;\n    let positionClassNames = '';\n\n    if (labelType === 'TextField') {\n      positionClassNames = `${styles.exclamationErrorContainer} ${styles.forTextField}`;\n    } else {\n      positionClassNames = `${styles.exclamationErrorContainer} ${styles.forAmountToPayTextField}`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: positionClassNames,\n      ref: this.ref,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: styles.exclamationError,\n        children: \"!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nExclamationError.propTypes = {\n  labelType: PropTypes.string,\n  shouldDisplay: PropTypes.bool\n};\nexport default ExclamationError;","map":{"version":3,"sources":["/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js"],"names":["React","PropTypes","styles","ExclamationError","Component","constructor","ref","createRef","state","componentDidUpdate","shouldDisplay","props","current","classList","add","visible","remove","render","labelType","positionClassNames","exclamationErrorContainer","forTextField","forAmountToPayTextField","exclamationError","propTypes","string","bool"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;;;AAEA,MAAMC,gBAAN,SAA+BH,KAAK,CAACI,SAArC,CAA+C;AAC7CC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,GAAL,gBAAWN,KAAK,CAACO,SAAN,EAAX;AACA,SAAKC,KAAL,GAAa,EAAb;AAED;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKC,KAA/B;;AAEA,QAAI,KAAKL,GAAL,CAASM,OAAT,IAAoBF,aAAxB,EAAuC;AACrC,WAAKJ,GAAL,CAASM,OAAT,CAAiBC,SAAjB,CAA2BC,GAA3B,CAAgC,GAAEZ,MAAM,CAACa,OAAQ,EAAjD;AACD,KAFD,MAEO,IAAI,KAAKT,GAAL,CAASM,OAAT,IAAoB,CAACF,aAAzB,EAAwC;AAC7C,WAAKJ,GAAL,CAASM,OAAT,CAAiBC,SAAjB,CAA2BG,MAA3B,CAAmC,GAAEd,MAAM,CAACa,OAAQ,EAApD;AACD;AACF;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAgB,KAAKP,KAA3B;AAEA,QAAIQ,kBAAkB,GAAG,EAAzB;;AAEA,QAAID,SAAS,KAAK,WAAlB,EAA+B;AAC7BC,MAAAA,kBAAkB,GAAI,GAAEjB,MAAM,CAACkB,yBAA0B,IAAGlB,MAAM,CAACmB,YAAa,EAAhF;AACD,KAFD,MAEO;AACLF,MAAAA,kBAAkB,GAAI,GAAEjB,MAAM,CAACkB,yBAA0B,IAAGlB,MAAM,CAACoB,uBAAwB,EAA3F;AACD;;AAED,wBACE;AACE,MAAA,SAAS,EAAEH,kBADb;AAEE,MAAA,GAAG,EAAE,KAAKb,GAFZ;AAAA,6BAIE;AAAM,QAAA,SAAS,EAAEJ,MAAM,CAACqB,gBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AArC4C;;AAwC/CpB,gBAAgB,CAACqB,SAAjB,GAA6B;AAC3BN,EAAAA,SAAS,EAAEjB,SAAS,CAACwB,MADM;AAE3Bf,EAAAA,aAAa,EAAET,SAAS,CAACyB;AAFE,CAA7B;AAKA,eAAevB,gBAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ExclamationError.module.css';\n\nclass ExclamationError extends React.Component {\n  constructor() {\n    super();\n    this.ref = React.createRef();\n    this.state = {\n    };\n  }\n\n  componentDidUpdate() {\n    const { shouldDisplay } = this.props;\n\n    if (this.ref.current && shouldDisplay) {\n      this.ref.current.classList.add(`${styles.visible}`);\n    } else if (this.ref.current && !shouldDisplay) {\n      this.ref.current.classList.remove(`${styles.visible}`);\n    }\n  }\n\n  render() {\n    const { labelType } = this.props;\n\n    let positionClassNames = '';\n\n    if (labelType === 'TextField') {\n      positionClassNames = `${styles.exclamationErrorContainer} ${styles.forTextField}`;\n    } else {\n      positionClassNames = `${styles.exclamationErrorContainer} ${styles.forAmountToPayTextField}`;\n    }\n\n    return (\n      <div\n        className={positionClassNames}\n        ref={this.ref}\n      >\n        <span className={styles.exclamationError}>!</span>\n      </div>\n    );\n  }\n}\n\nExclamationError.propTypes = {\n  labelType: PropTypes.string,\n  shouldDisplay: PropTypes.bool\n};\n\nexport default ExclamationError;\n"]},"metadata":{},"sourceType":"module"}