[{"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/index.js":"1","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/reportWebVitals.js":"2","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/App.js":"3","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentForm/PaymentForm.js":"4","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayForm/AmountToPayForm.js":"5","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Contexts/ValuesContext.js":"6","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/Grid/Grid.js":"7","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TextField/TextField.js":"8","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/SectionLabel/SectionLabel.js":"9","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TodaysDate/TodaysDate.js":"10","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/GeneralActionButton/GeneralActionButton.js":"11","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentFromTo/PaymentFromTo.js":"12","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js":"13","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayTextField/AmountToPayTextField.js":"14","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RequiredLabel/RequiredLabel.js":"15","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/APIErrorModal/APIErrorModal.js":"16","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentResponseError/PaymentResponseError.js":"17","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentConfirmationPage/PaymentConfirmationPage.js":"18","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CreditCardIcons.js":"19","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CreditCardIconsContainer/CreditCardIconsContainer.js":"20","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CardIcon/CardIcon.js":"21","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Axios/Axios.js":"22","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/UIModeSwitch/UIModeSwitch.js":"23","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RememberMe/RememberMe.js":"24"},{"size":500,"mtime":1630698941157,"results":"25","hashOfConfig":"26"},{"size":374,"mtime":1630698806528,"results":"27","hashOfConfig":"26"},{"size":188,"mtime":1630700718166,"results":"28","hashOfConfig":"26"},{"size":19328,"mtime":1633309995581,"results":"29","hashOfConfig":"26"},{"size":1367,"mtime":1633310565579,"results":"30","hashOfConfig":"26"},{"size":92,"mtime":1631720802209,"results":"31","hashOfConfig":"26"},{"size":570,"mtime":1633132839486,"results":"32","hashOfConfig":"26"},{"size":7792,"mtime":1633133109385,"results":"33","hashOfConfig":"26"},{"size":479,"mtime":1633133045383,"results":"34","hashOfConfig":"26"},{"size":518,"mtime":1633133116664,"results":"35","hashOfConfig":"26"},{"size":2659,"mtime":1633309500165,"results":"36","hashOfConfig":"26"},{"size":758,"mtime":1633132983263,"results":"37","hashOfConfig":"26"},{"size":1213,"mtime":1633132763526,"results":"38","hashOfConfig":"26"},{"size":4500,"mtime":1633309036681,"results":"39","hashOfConfig":"26"},{"size":452,"mtime":1633133029911,"results":"40","hashOfConfig":"26"},{"size":844,"mtime":1633132614920,"results":"41","hashOfConfig":"26"},{"size":551,"mtime":1633132977110,"results":"42","hashOfConfig":"26"},{"size":2935,"mtime":1633132832308,"results":"43","hashOfConfig":"26"},{"size":1445,"mtime":1633132728185,"results":"44","hashOfConfig":"26"},{"size":1456,"mtime":1633117993022,"results":"45","hashOfConfig":"26"},{"size":570,"mtime":1633132710474,"results":"46","hashOfConfig":"26"},{"size":238,"mtime":1633302119493,"results":"47","hashOfConfig":"26"},{"size":2374,"mtime":1633308243814,"results":"48","hashOfConfig":"26"},{"size":968,"mtime":1633312503760,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1lwwie5",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/index.js",[],["100","101","102","103","104","105"],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/reportWebVitals.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/App.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentForm/PaymentForm.js",["106"],"import React from 'react';\nimport { v4 as UUID } from 'uuid';\nimport { productionInstance as axios } from '../../Axios/Axios';\nimport APIErrorModal from '../APIErrorModal/APIErrorModal';\nimport UIModeSwitch from '../UIModeSwitch/UIModeSwitch';\nimport AmountToPayForm from '../AmountToPayForm/AmountToPayForm';\nimport ValuesContext from '../../Contexts/ValuesContext';\nimport Grid from '../Grid/Grid';\nimport TodaysDate from '../TodaysDate/TodaysDate';\nimport SectionLabel from '../SectionLabel/SectionLabel';\nimport RequiredLabel from '../RequiredLabel/RequiredLabel';\nimport TextField from '../TextField/TextField';\nimport PaymentConfirmationPage from '../PaymentConfirmationPage/PaymentConfirmationPage';\nimport styles from './PaymentForm.module.css';\n\nconst openPGP = require('openpgp');\nconst validator = require('email-validator');\n\nclass PaymentForm extends React.Component {\n  constructor() {\n    super();\n\n    this.paymentFormRef = React.createRef();\n    this.amountToPayFormRef = React.createRef();\n\n    this.state = {\n      key: {\n        keyId: '',\n        publicKey: '',\n        isInErrorState: false\n      },\n      apiError: {\n        message: ''\n      },\n      firstName: {\n        value: '',\n        isInErrorState: false\n      },\n      lastName: {\n        value: '',\n        isInErrorState: false\n      },\n      email: {\n        value: '',\n        isInErrorState: false\n      },\n      cardNumber: {\n        value: '',\n        isInErrorState: false\n      },\n      cardExpiry: {\n        value: '',\n        isInErrorState: false\n      },\n      cardCVV: {\n        value: '',\n        isInErrorState: false\n      },\n      amountEntered: {\n        value: '',\n        isInErrorState: false\n      },\n      isFormComplete: false,\n      isPaymentProcessing: false,\n      confirmationPage: {\n        amountPaid: '',\n        confirmationCode: '',\n        paymentDate: '',\n        paymentMethod: ''\n      }\n    };\n  }\n\n  handleFirstNameChanged = (event) => {\n    if (event) {\n      this.setState({\n        firstName: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { firstName } = this.state;\n\n      this.setState({\n        firstName: {\n          value: firstName.value,\n          isInErrorState: firstName.value.trim().length === 0\n        }\n      });\n    }\n  }\n\n  handleLastNameChanged = (event) => {\n    if (event) {\n      this.setState({\n        lastName: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { lastName } = this.state;\n\n      this.setState({\n        lastName: {\n          value: lastName.value,\n          isInErrorState: lastName.value.trim().length === 0\n        }\n      });\n    }\n  }\n\n  handleEmailChanged = (event) => {\n    if (event) {\n      this.setState({\n        email: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { email } = this.state;\n\n      this.setState({\n        email: {\n          value: email.value,\n          isInErrorState: !validator.validate(email.value.trim())\n        }\n      });\n    }\n  }\n\n  handleCardNumberChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardNumber: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardNumber } = this.state;\n\n      this.setState({\n        cardNumber: {\n          value: cardNumber.value,\n          isInErrorState: cardNumber.value.length !== 19\n        }\n      });\n    }\n  }\n\n  handleCardExpiryChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardExpiry: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardExpiry } = this.state;\n\n      this.setState({\n        cardExpiry: {\n          value: cardExpiry.value,\n          isInErrorState: cardExpiry.value.length !== 7\n        }\n      });\n    }\n  }\n\n  handleCardCVVChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardCVV: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardCVV } = this.state;\n\n      this.setState({\n        cardCVV: {\n          value: cardCVV.value,\n          isInErrorState: cardCVV.value.length !== 3\n        }\n      });\n    }\n  }\n\n  handleAmountEnteredChanged = (value) => {\n    if (!value.wasBlured) {\n      this.setState({\n        amountEntered: {\n          value: value.value,\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { amountEntered } = this.state;\n\n      this.setState({\n        amountEntered: {\n          value: amountEntered.value,\n          isInErrorState: !(amountEntered.value.length !== 0)\n        }\n      });\n    }\n  }\n\n  checkIfFormIsComplete = () => {\n    const { firstName } = this.state;\n    const { lastName } = this.state;\n\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const { amountEntered } = this.state;\n\n    if (firstName.value.trim().length !== 0\n      && lastName.value.trim().length !== 0\n      && validator.validate(email.value.trim())\n      && cardNumber.value.trim().length === 19\n      && cardExpiry.value.trim().length === 7\n      && cardCVV.value.trim().length === 3\n      && amountEntered.value.trim().length !== 0) {\n      this.setState({\n        isFormComplete: true\n      });\n    } else {\n      this.setState({\n        isFormComplete: false\n      });\n    }\n  }\n\n  formCompletionHandler = () => {\n    const { key } = this.state;\n    const { isPaymentProcessing } = this.state;\n    const { isFormComplete } = this.state;\n\n    if (!isPaymentProcessing && isFormComplete && key.publicKey) {\n      this.createCard();\n    } else {\n      const { firstName } = this.state;\n      const { lastName } = this.state;\n      const { email } = this.state;\n      const { cardNumber } = this.state;\n      const { cardExpiry } = this.state;\n      const { cardCVV } = this.state;\n      const { amountEntered } = this.state;\n\n      if (firstName.value.trim().length === 0) {\n        this.setState({\n          firstName: {\n            value: '',\n            isInErrorState: true\n          }\n        });\n\n        if (lastName.value.trim().length === 0) {\n          this.setState({\n            lastName: ({\n              value: '',\n              isInErrorState: true\n            })\n          });\n        }\n\n        if (!validator.validate(email.value.trim())) {\n          this.setState({\n            email: {\n              value: email.value,\n              isInErrorState: true\n            }\n          });\n\n          if (cardNumber.value.length !== 19) {\n            this.setState({\n              cardNumber: {\n                value: cardNumber.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (cardExpiry.value.length !== 7) {\n            this.setState({\n              cardExpiry: {\n                value: cardExpiry.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (cardCVV.value.length !== 3) {\n            this.setState({\n              cardCVV: {\n                value: cardCVV.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (amountEntered.value.length === 0) {\n            this.setState({\n              amountEntered: {\n                value: amountEntered.value,\n                isInErrorState: true\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n\n  createCard = async () => {\n    const { firstName } = this.state;\n    const { lastName } = this.state;\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const [cardExpiryMonth, cardExpiryYear] = cardExpiry.value.split('/');\n\n    const { amountEntered } = this.state;\n\n    const { key } = this.state;\n    const { keyId } = key;\n    const { publicKey } = key;\n\n    const payload = {\n      idempotencyKey: UUID(),\n      keyId,\n      encryptedData: '',\n      billingDetails: {\n        name: `${firstName.value} ${lastName.value}`,\n        city: 'Miami',\n        country: 'US',\n        line1: '5600 NW 72nd Ave',\n        district: 'FL',\n        postalCode: '33166'\n      }, // Temp\n      expMonth: parseInt(cardExpiryMonth, 10),\n      expYear: parseInt(cardExpiryYear, 10),\n      metadata: {\n        email: email.value,\n        sessionId: UUID(),\n        ipAddress: '172.33.222.1' // Fix this\n      },\n      encryptedCVV: '',\n      amount: amountEntered.value\n    };\n\n    const cardDetails = {\n      number: cardNumber.value.replace(/\\s/g, ''),\n      cvv: cardCVV.value\n    };\n\n    const data = await this.encryptCardData(cardDetails, publicKey, keyId);\n    const encryptedCVV = await this.encryptCVV(cardDetails.cvv, publicKey, keyId);\n\n    payload.encryptedData = data.encryptedData;\n    payload.encryptedCVV = encryptedCVV.encryptedData;\n\n    const requestOptions = {\n      data: {\n        payload\n      }\n    };\n\n    this.setState({\n      isPaymentProcessing: true\n    }, () => {\n      axios.post('/create-card-payment', requestOptions)\n        .then((response) => {\n          if (response.data.status === 'pending') {\n            this.pollEndpoint(response.data.id);\n          }\n        }).catch(({ response }) => {\n          this.setState({\n            isPaymentProcessing: false,\n            apiError: {\n              message: response.data.message\n            }\n          });\n        });\n    });\n  }\n\n  pollEndpoint = (paymentEndpoint) => {\n    axios.get(`/payment-status/${paymentEndpoint}`).then((response) => {\n      if (response.data.status === undefined || response.data.status === '' || response.data.status === 'pending') {\n        setTimeout(() => {\n          this.pollEndpoint(paymentEndpoint);\n        }, 2000);\n      } else if (response.data.status === 'confirmed' || response.data.state === 'success') {\n        this.performViewWillDisappearAnimation();\n\n        setTimeout(() => {\n          this.setState({\n            isPaymentProcessing: false,\n            confirmationPage: {\n              amountPaid: response.data.amount,\n              confirmationCode: response.data.id,\n              paymentDate: response.data.date,\n              paymentMethod: response.data.paymentMethod\n            }\n          });\n        }, 1000);\n      } else {\n        let errorString = '';\n\n        switch (response.data.status) {\n          case 'payment_failed':\n            errorString = 'Payment failed, try another card';\n            break;\n          case 'card_not_honored':\n            errorString = 'Card not honored';\n            break;\n          case 'payment_not_supported_by_issuer':\n            errorString = 'Payment not supported by issuer, try another card';\n            break;\n          case 'payment_not_funded':\n            errorString = 'Insufficient funds, try another card';\n            break;\n          case 'card_invalid':\n            errorString = 'Invalid card';\n            break;\n          case 'card_limit_violated':\n            errorString = 'Card limit violated, try another card';\n            break;\n          case 'payment_denied':\n            errorString = 'Payment denied';\n            break;\n          case 'payment_fraud_detected':\n            errorString = 'Payment fraud detected';\n            break;\n          case 'credit_card_not_allowed':\n            errorString = 'Card not honored';\n            break;\n          case 'Payment blocked by issuer':\n            errorString = 'Card not honored';\n            break;\n          case 'card_account_ineligible':\n            errorString = 'Card not eligible for this type of payment';\n            break;\n          default:\n            errorString = 'An unknown error occured';\n        }\n\n        this.setState({\n          isPaymentProcessing: false,\n          apiError: {\n            message: errorString\n          }\n        });\n      }\n    }).catch(({ paymentStatusError }) => {\n      console.log(paymentStatusError);\n    });\n  };\n\n  encryptCardData = async (cardDetails, key, keyId) => {\n    const decodedPublicKey = atob(key);\n    const options = {\n      message: await openPGP.createMessage({ text: JSON.stringify(cardDetails) }),\n      encryptionKeys: await openPGP.readKey({ armoredKey: decodedPublicKey })\n    };\n\n    return openPGP.encrypt(options).then((cipherText) => (\n      {\n        encryptedData: btoa(cipherText),\n        keyId\n      }\n    ));\n  }\n\n  encryptCVV = async (CVV, key, keyId) => {\n    const decodedPublicKey = atob(key);\n    const options = {\n      message: await openPGP.createMessage({ text: JSON.stringify(CVV) }),\n      encryptionKeys: await openPGP.readKey({ armoredKey: decodedPublicKey })\n    };\n\n    return openPGP.encrypt(options).then((cipherText) => (\n      {\n        encryptedData: btoa(cipherText),\n        keyId\n      }\n    ));\n  }\n\n  componentDidMount = () => {\n    axios.get('/key').then((response) => {\n      this.setState({\n        key: {\n          keyId: response.data.keyId,\n          publicKey: response.data.publicKey,\n          isInErrorState: false\n        }\n      });\n    }).catch(() => {\n      this.setState({\n        key: {\n          keyId: '',\n          publicKey: '',\n          isInErrorState: true\n        }\n      });\n    });\n\n    this.performViewDidAppearAnimation();\n  }\n\n  performViewDidAppearAnimation = () => {\n    if (this.paymentFormRef.current) {\n      setTimeout(() => {\n        this.paymentFormRef.current.classList.add(`${styles.visible}`);\n      }, 500);\n    }\n\n    if (this.amountToPayFormRef.current) {\n      setTimeout(() => {\n        this.amountToPayFormRef.current.classList.add(`${styles.visible}`);\n      }, 1000);\n    }\n  }\n\n  performViewWillDisappearAnimation = () => {\n    if (this.paymentFormRef.current) {\n      this.paymentFormRef.current.classList.remove(`${styles.visible}`);\n    }\n    if (this.amountToPayFormRef.current) {\n      this.amountToPayFormRef.current.classList.remove(`${styles.visible}`);\n    }\n  }\n\n  displayPaymentForm = () => {\n    const { isFormComplete } = this.state;\n    const { key } = this.state;\n    const { apiError } = this.state;\n\n    const { firstName } = this.state;\n    const { lastName } = this.state;\n\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const { amountEntered } = this.state;\n\n    const { isPaymentProcessing } = this.state;\n\n    return (\n      <>\n        <APIErrorModal\n          shouldDisplay={key.isInErrorState}\n        >\n          Error retrieving public key. Transactions will not process - refresh page\n        </APIErrorModal>\n        <UIModeSwitch />\n        <div\n          className={styles.overallGrid}\n        >\n          <div\n            className={styles.paymentForm}\n            ref={this.paymentFormRef}\n          >\n            <TodaysDate />\n            <Grid\n              columns=\"one\"\n            >\n              <Grid\n                columns=\"two\"\n              >\n                <SectionLabel\n                  type=\"dark\"\n                >\n                  Client Information\n                </SectionLabel>\n                <RequiredLabel\n                  shouldDisplay={firstName.isInErrorState\n                  || lastName.isInErrorState\n                  || email.isInErrorState}\n                />\n              </Grid>\n              <TextField\n                type=\"name\"\n                placeholder=\"First Name\"\n                onChangeEvent={this.handleFirstNameChanged}\n                shouldDisplayError={firstName.isInErrorState}\n              />\n              <TextField\n                type=\"name\"\n                placeholder=\"Last Name\"\n                onChangeEvent={this.handleLastNameChanged}\n                shouldDisplayError={lastName.isInErrorState}\n              />\n              <TextField\n                type=\"email\"\n                placeholder=\"Email\"\n                onChangeEvent={this.handleEmailChanged}\n                shouldDisplayError={email.isInErrorState}\n              />\n            </Grid>\n            <Grid\n              columns=\"one\"\n            >\n              <Grid\n                columns=\"two\"\n              >\n                <SectionLabel\n                  type=\"dark\"\n                >\n                  Card Information\n                </SectionLabel>\n                <RequiredLabel\n                  shouldDisplay={\n                      cardNumber.isInErrorState\n                      || cardExpiry.isInErrorState\n                      || cardCVV.isInErrorState\n                  }\n                />\n              </Grid>\n              <TextField\n                type=\"cardNumber\"\n                placeholder=\"1234 1234 1234 1234\"\n                onChangeEvent={this.handleCardNumberChanged}\n                shouldDisplayError={cardNumber.isInErrorState}\n              />\n              <TextField\n                type=\"cardExpiry\"\n                placeholder=\"MM/YYYY\"\n                onChangeEvent={this.handleCardExpiryChanged}\n                shouldDisplayError={cardExpiry.isInErrorState}\n              />\n              <TextField\n                type=\"cardCVV\"\n                placeholder=\"CVV\"\n                onChangeEvent={this.handleCardCVVChanged}\n                shouldDisplayError={cardCVV.isInErrorState}\n              />\n            </Grid>\n          </div>\n          <div\n            className={styles.amountToPayForm}\n            ref={this.amountToPayFormRef}\n          >\n            <ValuesContext.Provider value={{\n              name: `${firstName.value} ${lastName.value}`,\n              handleAmountEnteredChanged: this.handleAmountEnteredChanged,\n              amountEntered: amountEntered.value,\n              isFormComplete,\n              shouldDisplayAmountEnteredError: amountEntered.isInErrorState,\n              formCompletionHandler: this.formCompletionHandler,\n              paymentErrorResponse: apiError.message,\n              isPaymentProcessing\n            }}\n            >\n              <AmountToPayForm />\n            </ValuesContext.Provider>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  displayConfirmationPage = (amountPaid, confirmationCode, paymentDate, paymentMethod) => (\n    <PaymentConfirmationPage\n      amountPaid={amountPaid}\n      confirmationCode={confirmationCode}\n      paymentDate={paymentDate}\n      paymentMethod={paymentMethod}\n    />\n  );\n\n  render() {\n    const { confirmationPage } = this.state;\n\n    if (confirmationPage.confirmationCode) {\n      return this.displayConfirmationPage(confirmationPage.amountPaid,\n        confirmationPage.confirmationCode,\n        confirmationPage.paymentDate,\n        confirmationPage.paymentMethod);\n    }\n    return this.displayPaymentForm();\n  }\n}\n\nexport default PaymentForm;\n","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayForm/AmountToPayForm.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Contexts/ValuesContext.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/Grid/Grid.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TextField/TextField.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/SectionLabel/SectionLabel.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TodaysDate/TodaysDate.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/GeneralActionButton/GeneralActionButton.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentFromTo/PaymentFromTo.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayTextField/AmountToPayTextField.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RequiredLabel/RequiredLabel.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/APIErrorModal/APIErrorModal.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentResponseError/PaymentResponseError.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentConfirmationPage/PaymentConfirmationPage.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CreditCardIcons.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CreditCardIconsContainer/CreditCardIconsContainer.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/CreditCardIcons/CardIcon/CardIcon.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Axios/Axios.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/UIModeSwitch/UIModeSwitch.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RememberMe/RememberMe.js",["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":483,"column":7,"nodeType":"123","messageId":"124","endLine":483,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":14},{"ruleId":"121","severity":1,"message":"122","line":9,"column":3,"nodeType":"123","messageId":"124","endLine":9,"endColumn":14},"lines-around-directive",["125"],"no-spaced-func",["126"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements","func-call-spacing"]