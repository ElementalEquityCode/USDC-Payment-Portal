[{"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/index.js":"1","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/reportWebVitals.js":"2","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/App.js":"3","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentForm/PaymentForm.js":"4","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayForm/AmountToPayForm.js":"5","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Contexts/ValuesContext.js":"6","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/Grid/Grid.js":"7","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TextField/TextField.js":"8","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/SectionLabel/SectionLabel.js":"9","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TodaysDate/TodaysDate.js":"10","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/GeneralActionButton/GeneralActionButton.js":"11","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentFromTo/PaymentFromTo.js":"12","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js":"13","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayTextField/AmountToPayTextField.js":"14","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RequiredLabel/RequiredLabel.js":"15","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/APIErrorModal/APIErrorModal.js":"16"},{"size":500,"mtime":1630698941157,"results":"17","hashOfConfig":"18"},{"size":374,"mtime":1630698806528,"results":"19","hashOfConfig":"18"},{"size":188,"mtime":1630700718166,"results":"20","hashOfConfig":"18"},{"size":12718,"mtime":1632338949215,"results":"21","hashOfConfig":"18"},{"size":1227,"mtime":1632093957823,"results":"22","hashOfConfig":"18"},{"size":92,"mtime":1631720802209,"results":"23","hashOfConfig":"18"},{"size":522,"mtime":1632084094679,"results":"24","hashOfConfig":"18"},{"size":3777,"mtime":1632342561103,"results":"25","hashOfConfig":"18"},{"size":456,"mtime":1631055338066,"results":"26","hashOfConfig":"18"},{"size":518,"mtime":1631720802208,"results":"27","hashOfConfig":"18"},{"size":1752,"mtime":1631753455372,"results":"28","hashOfConfig":"18"},{"size":683,"mtime":1631746543184,"results":"29","hashOfConfig":"18"},{"size":1202,"mtime":1631744628854,"results":"30","hashOfConfig":"18"},{"size":4070,"mtime":1632338918186,"results":"31","hashOfConfig":"18"},{"size":418,"mtime":1632084911801,"results":"32","hashOfConfig":"18"},{"size":719,"mtime":1632262659753,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ovfb6i",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/index.js",[],["68","69","70","71","72","73"],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/reportWebVitals.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/App.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentForm/PaymentForm.js",["74","75"],"import React from 'react';\nimport axios from 'axios';\nimport { v4 as UUID } from 'uuid';\nimport AmountToPayForm from '../AmountToPayForm/AmountToPayForm';\nimport ValuesContext from '../../Contexts/ValuesContext';\nimport Grid from '../Grid/Grid';\nimport TodaysDate from '../TodaysDate/TodaysDate';\nimport SectionLabel from '../SectionLabel/SectionLabel';\nimport RequiredLabel from '../RequiredLabel/RequiredLabel';\nimport TextField from '../TextField/TextField';\nimport APIErrorModal from '../APIErrorModal/APIErrorModal';\nimport styles from './PaymentForm.module.css';\n\nconst openPGP = require('openpgp');\nconst validator = require('email-validator');\n\nclass PaymentForm extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      key: {\n        keyId: '',\n        publicKey: '',\n        isInErrorState: false\n      },\n      name: {\n        value: '',\n        isInErrorState: false\n      },\n      email: {\n        value: '',\n        isInErrorState: false\n      },\n      cardNumber: {\n        value: '',\n        isInErrorState: false\n      },\n      cardExpiry: {\n        value: '',\n        isInErrorState: false\n      },\n      cardCVV: {\n        value: '',\n        isInErrorState: false\n      },\n      amountEntered: {\n        value: '',\n        isInErrorState: false\n      },\n      isFormComplete: false\n    };\n  }\n\n  handleNameChanged = (event) => {\n    if (event) {\n      this.setState({\n        name: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { name } = this.state;\n\n      this.setState({\n        name: {\n          value: name.value,\n          isInErrorState: name.value.trim().length === 0\n        }\n      });\n    }\n  }\n\n  handleEmailChanged = (event) => {\n    if (event) {\n      this.setState({\n        email: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { email } = this.state;\n\n      this.setState({\n        email: {\n          value: email.value,\n          isInErrorState: !validator.validate(email.value.trim())\n        }\n      });\n    }\n  }\n\n  handleCardNumberChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardNumber: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardNumber } = this.state;\n\n      this.setState({\n        cardNumber: {\n          value: cardNumber.value,\n          isInErrorState: cardNumber.value.length !== 16\n        }\n      });\n    }\n  }\n\n  handleCardExpiryChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardExpiry: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardExpiry } = this.state;\n\n      this.setState({\n        cardExpiry: {\n          value: cardExpiry.value,\n          isInErrorState: cardExpiry.value.length !== 7\n        }\n      });\n    }\n  }\n\n  handleCardCVVChanged = (event) => {\n    if (event) {\n      this.setState({\n        cardCVV: {\n          value: event.target.value.trim(),\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { cardCVV } = this.state;\n\n      this.setState({\n        cardCVV: {\n          value: cardCVV.value,\n          isInErrorState: cardCVV.value.length !== 3\n        }\n      });\n    }\n  }\n\n  handleAmountEnteredChanged = (value) => {\n    if (value) {\n      this.setState({\n        amountEntered: {\n          value,\n          isInErrorState: false\n        }\n      }, () => {\n        this.checkIfFormIsComplete();\n      });\n    } else {\n      const { amountEntered } = this.state;\n\n      this.setState({\n        amountEntered: {\n          value: amountEntered.value,\n          isInErrorState: !amountEntered.value.length > 0\n        }\n      });\n    }\n  }\n\n  checkIfFormIsComplete = () => {\n    const { name } = this.state;\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const { amountEntered } = this.state;\n\n    if (name.value.trim().length !== 0\n      && validator.validate(email.value.trim())\n      && cardNumber.value.trim().length === 16\n      && cardExpiry.value.trim().length === 7\n      && cardCVV.value.trim().length === 3\n      && amountEntered.value.trim().length !== 0) {\n      this.setState({\n        isFormComplete: true\n      });\n    } else {\n      this.setState({\n        isFormComplete: false\n      });\n    }\n  }\n\n  formCompletionHandler = () => {\n    const { isFormComplete } = this.state;\n\n    if (isFormComplete) {\n      this.createCard();\n    } else {\n      const { name } = this.state;\n      const { email } = this.state;\n      const { cardNumber } = this.state;\n      const { cardExpiry } = this.state;\n      const { cardCVV } = this.state;\n      const { amountEntered } = this.state;\n\n      if (name.value.trim().length === 0) {\n        this.setState({\n          name: {\n            value: '',\n            isInErrorState: true\n          }\n        });\n\n        if (!validator.validate(email.value.trim())) {\n          this.setState({\n            email: {\n              value: email.value,\n              isInErrorState: true\n            }\n          });\n\n          if (cardNumber.value.length !== 16) {\n            this.setState({\n              cardNumber: {\n                value: cardNumber.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (cardExpiry.value.length !== 7) {\n            this.setState({\n              cardExpiry: {\n                value: cardExpiry.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (cardCVV.value.length !== 3) {\n            this.setState({\n              cardCVV: {\n                value: cardCVV.value,\n                isInErrorState: true\n              }\n            });\n          }\n\n          if (amountEntered.value.length === 0) {\n            this.setState({\n              amountEntered: {\n                value: amountEntered.value,\n                isInErrorState: true\n              }\n            });\n          }\n        }\n      }\n    }\n  }\n\n  createCard = async () => {\n    const { name } = this.state;\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const [cardExpiryMonth, cardExpiryYear] = cardExpiry.value.split('/');\n\n    const { amountEntered } = this.state;\n\n    const { key } = this.state;\n    const { keyId } = key;\n    const { publicKey } = key;\n\n    const payload = {\n      idempotencyKey: UUID(),\n      keyId,\n      encryptedData: '',\n      billingDetails: {\n        name: name.value,\n        city: 'Doral',\n        country: 'US',\n        line1: '11133 NW 71st Ter',\n        district: 'FL',\n        postalCode: '33178'\n      },\n      expMonth: parseInt(cardExpiryMonth, 10),\n      expYear: parseInt(cardExpiryYear, 10),\n      metadata: {\n        email: email.value,\n        sessionId: UUID(),\n        ipAddress: '172.33.222.1'\n      },\n      encryptedCVV: '',\n      amount: amountEntered.value\n    };\n\n    const cardDetails = {\n      number: cardNumber.value,\n      cvv: cardCVV.value\n    };\n\n    const data = await this.encryptCardData(cardDetails, publicKey, keyId);\n    const encryptedCVV = await this.encryptCVV(cardDetails.cvv, publicKey, keyId);\n\n    payload.encryptedData = data.encryptedData;\n    payload.encryptedCVV = encryptedCVV.encryptedData;\n\n    const requestOptions = {\n      data: {\n        payload\n      }\n    };\n\n    axios.post('/create-card-payment', requestOptions).then((response) => {\n      console.log(response);\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n\n  encryptCardData = async (cardDetails, key, keyId) => {\n    const decodedPublicKey = atob(key);\n    const options = {\n      message: await openPGP.createMessage({ text: JSON.stringify(cardDetails) }),\n      encryptionKeys: await openPGP.readKey({ armoredKey: decodedPublicKey })\n    };\n\n    return openPGP.encrypt(options).then((cipherText) => (\n      {\n        encryptedData: btoa(cipherText),\n        keyId\n      }\n    ));\n  }\n\n  encryptCVV = async (CVV, key, keyId) => {\n    const decodedPublicKey = atob(key);\n    const options = {\n      message: await openPGP.createMessage({ text: JSON.stringify(CVV) }),\n      encryptionKeys: await openPGP.readKey({ armoredKey: decodedPublicKey })\n    };\n\n    return openPGP.encrypt(options).then((cipherText) => (\n      {\n        encryptedData: btoa(cipherText),\n        keyId\n      }\n    ));\n  }\n\n  componentDidMount = () => {\n    axios.get('/key').then((response) => {\n      this.setState({\n        key: {\n          keyId: response.data.keyId,\n          publicKey: response.data.publicKey,\n          isInErrorState: false\n        }\n      });\n    }).catch(() => {\n      this.setState({\n        key: {\n          keyId: '',\n          publicKey: '',\n          isInErrorState: true\n        }\n      });\n    });\n  }\n\n  render() {\n    const { isFormComplete } = this.state;\n    const { key } = this.state;\n\n    const { name } = this.state;\n    const { email } = this.state;\n\n    const { cardNumber } = this.state;\n    const { cardExpiry } = this.state;\n    const { cardCVV } = this.state;\n\n    const { amountEntered } = this.state;\n\n    return (\n      <>\n        <APIErrorModal\n          shouldDisplay={key.isInErrorState}\n        >\n          Error retrieving public key. Transactions will not process - refresh page\n        </APIErrorModal>\n        <div\n          className={styles.overallGrid}\n        >\n          <div className={styles.paymentForm}>\n            <TodaysDate />\n            <Grid\n              columns=\"one\"\n            >\n              <Grid\n                columns=\"two\"\n              >\n                <SectionLabel\n                  type=\"dark\"\n                >\n                  Client Information\n                </SectionLabel>\n                <RequiredLabel shouldDisplay={name.isInErrorState || email.isInErrorState} />\n              </Grid>\n              <TextField\n                type=\"name\"\n                placeholder=\"Name\"\n                onChangeEvent={this.handleNameChanged}\n                shouldDisplayError={name.isInErrorState}\n              />\n              <TextField\n                type=\"email\"\n                placeholder=\"Email\"\n                onChangeEvent={this.handleEmailChanged}\n                shouldDisplayError={email.isInErrorState}\n              />\n            </Grid>\n            <Grid\n              columns=\"one\"\n            >\n              <Grid\n                columns=\"two\"\n              >\n                <SectionLabel\n                  type=\"dark\"\n                >\n                  Card Information\n                </SectionLabel>\n                <RequiredLabel\n                  shouldDisplay={\n                      cardNumber.isInErrorState\n                      || cardExpiry.isInErrorState\n                      || cardCVV.isInErrorState\n                  }\n                />\n              </Grid>\n              <TextField\n                type=\"cardNumber\"\n                placeholder=\"1234 1234 1234 1234\"\n                onChangeEvent={this.handleCardNumberChanged}\n                shouldDisplayError={cardNumber.isInErrorState}\n              />\n              <TextField\n                type=\"cardExpiry\"\n                placeholder=\"MM/YYYY\"\n                onChangeEvent={this.handleCardExpiryChanged}\n                shouldDisplayError={cardExpiry.isInErrorState}\n              />\n              <TextField\n                type=\"cardCVV\"\n                placeholder=\"CVV\"\n                onChangeEvent={this.handleCardCVVChanged}\n                shouldDisplayError={cardCVV.isInErrorState}\n              />\n            </Grid>\n          </div>\n          <div className={styles.amountToPayForm}>\n            <ValuesContext.Provider value={{\n              name: name.value,\n              handleAmountEnteredChanged: this.handleAmountEnteredChanged,\n              amountEntered: amountEntered.value,\n              isFormComplete,\n              shouldDisplayAmountEnteredError: amountEntered.isInErrorState,\n              formCompletionHandler: this.formCompletionHandler\n            }}\n            >\n              <AmountToPayForm />\n            </ValuesContext.Provider>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default PaymentForm;\n","/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayForm/AmountToPayForm.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Contexts/ValuesContext.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/Grid/Grid.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TextField/TextField.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/SectionLabel/SectionLabel.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/TodaysDate/TodaysDate.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/GeneralActionButton/GeneralActionButton.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/PaymentFromTo/PaymentFromTo.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/ExclamationError/ExclamationError.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/AmountToPayTextField/AmountToPayTextField.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/RequiredLabel/RequiredLabel.js",[],"/Users/danielvalencia/Documents/Programming/Web Development/React Apps/usdc-payment-portal/Client/src/Components/APIErrorModal/APIErrorModal.js",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":339,"column":7,"nodeType":"90","messageId":"91","endLine":339,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":341,"column":7,"nodeType":"90","messageId":"91","endLine":341,"endColumn":18},"lines-around-directive",["92"],"no-spaced-func",["93"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements","func-call-spacing"]